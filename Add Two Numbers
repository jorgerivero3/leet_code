# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        newRoot = ListNode()
        newNode = newRoot
        while l1 != None and l2 != None:
            digit = l1.val + l2.val
            print("First",newNode.val, digit)
            if digit >= 10:
                newNode.val = digit % 10
                if l1.next != None:
                    l1.next.val += digit//10
                elif l2.next != None:
                    l2.next.val += digit//10
                elif newNode != None:
                    newNode.next = ListNode(digit // 10)
            else:
                newNode.val = digit
            print(newNode.val)
            l1 = l1.next
            l2 = l2.next
            if not newNode.next and (l1 != None or l2 != None):
                newNode.next = ListNode()
            newNode = newNode.next
            
        
        
        while l1 != None:
            print("l1.val",l1.val)
            if l1.val >= 10:
                newNode.val = l1.val % 10
                if l1.next != None:
                    l1.next.val += digit//10
                newNode.next = ListNode(l1.val // 10)
            else: 
                newNode.val = l1.val
                if l1.next != None:
                    newNode.next = ListNode()
                    
            newNode = newNode.next
            l1 = l1.next
        
        while l2 != None:
            print("l2",l2.val)
            if l2.val >= 10:
                newNode.val = l2.val % 10
                if l2.next != None:
                    l2.next.val += digit//10
                newNode.next = ListNode(l2.val // 10)
            else: 
                newNode.val = l2.val
                if l2.next != None:
                    newNode.next = ListNode()
                    
            newNode = newNode.next
            l2 = l2.next
        
        return newRoot
            
        
                
            
